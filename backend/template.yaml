AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Data Banana serverless backend

Globals:
  Function:
    Timeout: 15
    Runtime: python3.11
    MemorySize: 256
    Environment:
      Variables:
        DB_HOST: !Ref DatabaseHost
        DB_NAME: !Ref DatabaseName
        DB_USER: !Ref DatabaseUser
        DB_PASSWORD: !Ref DatabasePassword
        STRIPE_SECRET: !Ref StripeSecret
        STRIPE_SECRET_TEST: !Ref StripeSecretTest
        S3_BUCKET: !Ref ImageBucket
        ANTHROPIC_API_KEY: !Ref AnthropicApiKey
        GEMINI_API_KEY: !Ref GeminiApiKey
        FRONTEND_URL: !Ref FrontendUrl
        CONNECTIONS_TABLE: !Ref WebSocketConnectionsTable
        WEBSOCKET_API_ID: !Ref WebSocketApi
        WEBSOCKET_STAGE: prod
  Api:
    Auth:
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

Parameters:
  DatabaseHost:
    Type: String
    Description: PostgreSQL database host
  DatabaseName:
    Type: String
    Description: Database name
  DatabaseUser:
    Type: String
    Description: Database username
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database password
  StripeSecret:
    Type: String
    NoEcho: true
    Description: Stripe secret key (live)
  StripeSecretTest:
    Type: String
    NoEcho: true
    Description: Stripe secret key (test)
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic Claude API key
  GeminiApiKey:
    Type: String
    NoEcho: true
    Description: Gemini API key for Nano Banana service
  FrontendUrl:
    Type: String
    Description: Frontend URL for Stripe redirect URLs
    Default: http://localhost:5173

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-users"
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${AWS::StackName}-client"
      GenerateSecret: false

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-images"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ["*"]

  # Database Lambda Functions
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: user.handler
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateCredits:
          Type: Api
          Properties:
            Path: /user/credits
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  BatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: batch.handler
      Events:
        GetBatches:
          Type: Api
          Properties:
            Path: /batches
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        CreateBatch:
          Type: Api
          Properties:
            Path: /batches
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: image.handler
      Events:
        GetImages:
          Type: Api
          Properties:
            Path: /images
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateImage:
          Type: Api
          Properties:
            Path: /images/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  GenerateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: generate.handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImageGenerationStateMachine
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt ImageGenerationStateMachine.Name
      Events:
        Generate:
          Type: Api
          Properties:
            Path: /generate
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GenerateOptions:
          Type: Api
          Properties:
            Path: /generate
            Method: options


  # Step Functions Lambda functions
  ValidateAndSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: validate_and_setup.handler
      Timeout: 30
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  GeneratePromptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: generate_prompts.handler
      Timeout: 300
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  StartImageGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: start_image_generation.handler
      Timeout: 300
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  CheckImageStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: check_image_status.handler
      Timeout: 30
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  ProcessImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: process_images.handler
      Timeout: 900
      MemorySize: 1024
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  LabelImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: label_images.handler
      Timeout: 900
      MemorySize: 512
      Policies:
        - RekognitionDetectOnlyPolicy: {}
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  SaveFinalResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: save_final_results.handler
      Timeout: 300
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  RefundUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: refund_user.handler
      Timeout: 60
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # Debug and monitoring endpoint
  DebugStepFunctionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: debug_step_functions.handler
      Timeout: 30
      MemorySize: 256
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt ImageGenerationStateMachine.Name
        - Statement:
          - Effect: Allow
            Action:
              - states:ListExecutions
              - states:DescribeExecution
              - states:GetExecutionHistory
            Resource: !Sub "${ImageGenerationStateMachine}*"
      Events:
        ListExecutions:
          Type: Api
          Properties:
            Path: /debug/executions
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetExecution:
          Type: Api
          Properties:
            Path: /debug/executions/{execution_id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  PaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: payment.handler
      Events:
        Payment:
          Type: Api
          Properties:
            Path: /payment
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: upload.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: export.handler
      Timeout: 300
      MemorySize: 1024
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
      Events:
        Export:
          Type: Api
          Properties:
            Path: /export
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  WebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: stripe_webhook.handler
      Events:
        Webhook:
          Type: Api
          Properties:
            Path: /webhook
            Method: post

  # Workbench Functions for Testing APIs
  WorkbenchClaudeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: workbench_claude.lambda_handler
      Timeout: 60
      MemorySize: 512
      Events:
        WorkbenchClaude:
          Type: Api
          Properties:
            Path: /workbench/claude
            Method: post
        WorkbenchClaudeOptions:
          Type: Api
          Properties:
            Path: /workbench/claude
            Method: options

  WorkbenchGeminiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: workbench_gemini.lambda_handler
      Timeout: 600  # 10 minutes for batch processing + image download
      MemorySize: 1024
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
      Events:
        WorkbenchGemini:
          Type: Api
          Properties:
            Path: /workbench/gemini
            Method: post
        WorkbenchGeminiOptions:
          Type: Api
          Properties:
            Path: /workbench/gemini
            Method: options

  WorkbenchStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: workbench_status.lambda_handler
      Timeout: 60
      MemorySize: 1024
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
      Events:
        WorkbenchStatus:
          Type: Api
          Properties:
            Path: /workbench/status/{job_id}
            Method: get

  # Step Functions State Machine
  ImageGenerationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: ImageGenerationStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      Definition:
        Comment: "Image Generation and Processing Workflow"
        StartAt: "ValidateAndSetup"
        States:
          ValidateAndSetup:
            Type: "Task"
            Resource: !GetAtt ValidateAndSetupFunction.Arn
            Next: "GeneratePrompts"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "HandleError"
          GeneratePrompts:
            Type: "Task"
            Resource: !GetAtt GeneratePromptsFunction.Arn
            Next: "StartImageGeneration"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "RefundUser"
          StartImageGeneration:
            Type: "Task"
            Resource: !GetAtt StartImageGenerationFunction.Arn
            Next: "WaitForImages"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "RefundUser"
          WaitForImages:
            Type: "Wait"
            Seconds: 30
            Next: "CheckImageStatus"
          CheckImageStatus:
            Type: "Task"
            Resource: !GetAtt CheckImageStatusFunction.Arn
            Next: "IsImageComplete"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "RefundUser"
          IsImageComplete:
            Type: "Choice"
            Choices:
              - Variable: "$.status"
                StringEquals: "completed"
                Next: "ProcessImages"
              - Variable: "$.status"
                StringEquals: "failed"
                Next: "RefundUser"
              - Variable: "$.retryCount"
                NumericGreaterThan: 20
                Next: "RefundUser"
            Default: "IncrementRetry"
          IncrementRetry:
            Type: "Pass"
            Parameters:
              "retryCount.$": "States.MathAdd($.retryCount, 1)"
              "context.$": "$.context"
              "exclude_tags.$": "$.exclude_tags"
              "image_count.$": "$.image_count"
              "cognito_user_id.$": "$.cognito_user_id"
              "cost.$": "$.cost"
              "user_credits.$": "$.user_credits"
              "batch_id.$": "$.batch_id"
              "variations.$": "$.variations"
              "gemini_batch_id.$": "$.gemini_batch_id"
              "execution_id.$": "$.execution_id"
            Next: "WaitForImages"
          ProcessImages:
            Type: "Task"
            Resource: !GetAtt ProcessImagesFunction.Arn
            Next: "LabelImages"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "RefundUser"
          LabelImages:
            Type: "Task"
            Resource: !GetAtt LabelImagesFunction.Arn
            Next: "SaveFinalResults"
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: "RefundUser"
          SaveFinalResults:
            Type: "Task"
            Resource: !GetAtt SaveFinalResultsFunction.Arn
            Next: "Success"
          Success:
            Type: "Succeed"
          RefundUser:
            Type: "Task"
            Resource: !GetAtt RefundUserFunction.Arn
            Next: "HandleError"
          HandleError:
            Type: "Fail"

  # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ValidateAndSetupFunction.Arn
                  - !GetAtt GeneratePromptsFunction.Arn
                  - !GetAtt StartImageGenerationFunction.Arn
                  - !GetAtt CheckImageStatusFunction.Arn
                  - !GetAtt ProcessImagesFunction.Arn
                  - !GetAtt LabelImagesFunction.Arn
                  - !GetAtt SaveFinalResultsFunction.Arn
                  - !GetAtt RefundUserFunction.Arn

  # WebSocket Infrastructure
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-websocket"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-websocket-connections"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  WebSocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: websocket_simple.handler
      Timeout: 30
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub "integrations/${ConnectIntegration}"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketFunction.Arn}/invocations"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub "integrations/${DisconnectIntegration}"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketFunction.Arn}/invocations"

  SubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: subscribe
      Target: !Sub "integrations/${SubscribeIntegration}"

  SubscribeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketFunction.Arn}/invocations"

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - SubscribeRoute
      - ConnectIntegration
      - DisconnectIntegration
      - SubscribeIntegration
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod

  # Lambda permissions for WebSocket
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

Outputs:
  ApiGatewayApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"  
    Value: !Ref UserPoolClient
  
  WebSocketApiUrl:
    Description: "WebSocket API URL for real-time updates"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
